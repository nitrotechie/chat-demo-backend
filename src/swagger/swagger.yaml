openapi: 3.0.3
info:
  title: ShareHive API
  version: 1.0.0
  description: |
    API documentation for ShareHive backend (User, Product, ProductRequest, ChatRoom, Message).

    **Authentication:**
    - Most endpoints require JWT authentication (see Socket.IO section for real-time events).

servers:
  - url: http://localhost:3000

paths:
  /users:
    post:
      summary: Create a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      summary: Update user by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    delete:
      summary: Delete user by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found

  /product-request:
    post:
      summary: Request a product
      tags: [ProductRequest]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequestCreate"
      responses:
        "201":
          description: Product request created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductRequest"

  /product-request/{id}/accept:
    post:
      summary: Accept a product request
      tags: [ProductRequest]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product request accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductRequest"
        "404":
          description: Request not found

  /products:
    post:
      summary: Create a new product
      tags: [Product]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    get:
      summary: List all products
      tags: [Product]
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      summary: Get product by ID
      tags: [Product]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
    put:
      summary: Update product by ID
      tags: [Product]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
    delete:
      summary: Delete product by ID
      tags: [Product]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Product deleted
        "404":
          description: Product not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserCreate:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    ProductRequest:
      type: object
      properties:
        id:
          type: integer
        productId:
          type: integer
        requestedById:
          type: integer
        status:
          type: string
          enum: [PENDING, ACCEPTED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductRequestCreate:
      type: object
      required: [productId, requestedById]
      properties:
        productId:
          type: integer
        requestedById:
          type: integer
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        ownerId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductCreate:
      type: object
      required: [name, ownerId]
      properties:
        name:
          type: string
        ownerId:
          type: integer
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        ownerId:
          type: integer
